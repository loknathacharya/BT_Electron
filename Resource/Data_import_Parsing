# backend/main.py
from fastapi import FastAPI, UploadFile, File, HTTPException
from fastapi.middleware.cors import CORSMiddleware
from typing import List, Optional
import pandas as pd
from pandas.api.types import is_datetime64_any_dtype, is_numeric_dtype
from io import BytesIO
import os

app = FastAPI(title="OHLCV Cleaner API")

# Allow local dev frontends (adjust as needed)
app.add_middleware(
    CORSMiddleware,
    allow_origins=["http://localhost:5173", "http://localhost:3000"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# --- Helpers ---
def _standardize_ohlcv_columns(df: pd.DataFrame) -> pd.DataFrame:
    df = df.copy()
    df.columns = df.columns.str.lower().str.strip()

    col_map = {
        'ticker': 'ticker', 'symbol': 'ticker', 'instrument': 'ticker',
        'date': 'date', 'datetime': 'date', 'timestamp': 'date', 'time': 'date',
        'open': 'open', 'o': 'open',
        'high': 'high', 'h': 'high',
        'low': 'low', 'l': 'low',
        'close': 'close', 'c': 'close', 'adj close': 'close', 'adj_close': 'close', 'adjusted close': 'close',
        'volume': 'volume', 'v': 'volume', 'vol': 'volume'
    }
    rename_map = {c: col_map[c] for c in df.columns if c in col_map}
    df = df.rename(columns=rename_map)

    title_map = {
        'ticker': 'Ticker', 'date': 'Date',
        'open': 'Open', 'high': 'High', 'low': 'Low', 'close': 'Close',
        'volume': 'Volume'
    }
    df = df.rename(columns={k: v for k, v in title_map.items() if k in df.columns})
    return df

def _parse_dates(series: pd.Series) -> pd.Series:
    s = series.copy()

    # Numeric epoch (heuristic for ms vs s)
    if is_numeric_dtype(s):
        median_val = pd.to_numeric(s, errors='coerce').dropna().median()
        if pd.notna(median_val) and median_val > 10**11:
            return pd.to_datetime(s, unit='ms', errors='coerce')
        else:
            return pd.to_datetime(s, unit='s', errors='coerce')

    # Strings: take left date part before space and try ISO first, then flexible
    s = s.astype(str).str.strip()
    s = s.str.split().str[0]
    parsed = pd.to_datetime(s, format='%Y-%m-%d', errors='coerce')
    if parsed.isna().all():
        parsed = pd.to_datetime(s, errors='coerce', dayfirst=False, utc=False)
    return parsed

def _read_any_ohlcv(upload: UploadFile) -> pd.DataFrame:
    name = (upload.filename or "").lower()
    data = BytesIO(upload.file.read())  # read fully for safe re-reads
    if name.endswith(".parquet"):
        return pd.read_parquet(data)
    elif name.endswith(".xlsx") or name.endswith(".xls"):
        return pd.read_excel(data)
    else:
        return pd.read_csv(data, low_memory=False)

@app.get("/")
def health():
    return {"ok": True, "service": "OHLCV Cleaner API"}

@app.post("/clean_ohlcv")
async def clean_ohlcv(file: UploadFile = File(...)):
    try:
        df = _read_any_ohlcv(file)
    except Exception as e:
        raise HTTPException(status_code=400, detail=f"Failed to read file '{file.filename}': {e}")

    df = _standardize_ohlcv_columns(df)

    required = ['Ticker', 'Date', 'Open', 'High', 'Low', 'Close']
    missing = [c for c in required if c not in df.columns]
    if missing:
        raise HTTPException(
            status_code=422,
            detail=f"OHLCV file is missing required columns: {missing}. Found: {list(df.columns)}"
        )

    # Parse dates
    df['Date'] = _parse_dates(df['Date'])
    if not is_datetime64_any_dtype(df['Date']):
        raise HTTPException(status_code=422, detail="Date column could not be reliably converted to datetime.")

    # Numeric coercion
    for col in ['Open', 'High', 'Low', 'Close', 'Volume']:
        if col in df.columns:
            df[col] = pd.to_numeric(df[col], errors='coerce')

    before = len(df)
    df.dropna(subset=['Date', 'Close', 'Low', 'Open', 'High'], inplace=True)
    after = len(df)
    dropped = before - after

    # Sort
    if 'Ticker' in df.columns:
        df = df.sort_values(['Ticker', 'Date']).reset_index(drop=True)
    else:
        df = df.sort_values(['Date']).reset_index(drop=True)

    # JSON-safe preview: format Date as ISO
    df_preview = df.copy()
    df_preview['Date'] = df_preview['Date'].dt.strftime('%Y-%m-%d')
    preview_records = df_preview.head(200).to_dict(orient='records')

    return {
        "filename": file.filename,
        "rows_total": int(after),
        "rows_dropped": int(dropped),
        "columns": list(df.columns),
        "preview": preview_records
    }
